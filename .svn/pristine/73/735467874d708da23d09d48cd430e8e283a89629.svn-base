package fileoperation
{
	import Pattern.PatternModel;
	
	import flash.net.FileFilter;
	import flash.net.FileReference;
	import flash.net.FileReferenceList;
	import flash.xml.XMLDocument;
	
	import mx.collections.ArrayCollection;
	import mx.controls.Alert;
	import mx.rpc.events.ResultEvent;
	import mx.rpc.xml.SimpleXMLDecoder;
	
	import org.act.od.framework.view.ViewLocator;
	import org.act.od.impl.figure.IFigure;
	import org.act.od.impl.figure.ProcessFigure;
	import org.act.od.impl.model.FigureEditorModel;
	import org.act.od.impl.model.FigureEditorNavigatorModel;
	import org.act.od.impl.model.OrDesignerModelLocator;
	import org.act.od.impl.other.StringConvertor;
	import org.act.od.impl.view.FigureEditor;
	import org.act.od.impl.viewhelper.FigureEditorNavigatorVH;
	
	public class LoadFromFile
	{
		public var data:XML;
		public var filename:String;
		public var orDesignerLoc: OrDesignerModelLocator;
		public var patMods :ArrayCollection;
		public function LoadFromFile()
		{
			orDesignerLoc = OrDesignerModelLocator.getInstance();
		}
		public function getNet():void
		{
			var figEditorModel:FigureEditorModel = new FigureEditorModel("");
			figEditorModel.setxml(data);
			orDesignerLoc.figureEditorNavigatorModel.activeFigureEditorModel = figEditorModel;
			var temp:FigureEditorModel = orDesignerLoc.figureEditorNavigatorModel.activeFigureEditorModel;
			
			var feNavVH :FigureEditorNavigatorVH = 
				ViewLocator.getInstance().getViewHelper(FigureEditorNavigatorVH.VH_KEY) as FigureEditorNavigatorVH;
			feNavVH.createNewFigureEditor(temp, "", filename);
			var xmlList:XMLList = new XMLList();
			xmlList = data.elements("Figure");
			for(var i:int = 0;i<xmlList.length();i++)
			{
				var atts:XMLList = new XMLList();
				atts = xmlList[i].children();
				var nameNode:XMLList = atts.Attribute.(@name == "name");
				var patNode:XMLList = atts.Attribute.(@name == "patMode");
				var nameXMLValue : String = (nameNode.children()!=null)?nameNode.children().toString():"";
				var nameValue : String = StringConvertor.escapeToReadable(nameXMLValue);
				var patXMLValue : String = (patNode.children()!=null)?patNode.children().toString():"";
				var patValue : String = StringConvertor.escapeToReadable(patXMLValue);
				if (nameValue.localeCompare("DataStream")==0)
				{
					var patt:PatternModel = getSelectedPatFromName(patValue);
					orDesignerLoc.setSelectedPat(patt);
				}
			}
		}
		public function getSelectedPatFromName(patStr:String):PatternModel
		{
			for (var i:int = 0;i<patMods.length;i++)
			{
				if(PatternModel(patMods[i]).patternName.localeCompare(patStr)==0)
					return PatternModel(patMods[i]);
			}
			return new PatternModel();
		}
	}
}