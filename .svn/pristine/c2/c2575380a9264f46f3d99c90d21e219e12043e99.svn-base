<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
			import Pattern.AttributeModel;
			import Pattern.OperatorClass;
			
			import fileoperation.SaveToFile;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.Text;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var cos:ArrayCollection;
			[Bindable]
			private var params:ArrayCollection;
			[Bindable]
			private var outputs:ArrayCollection;
			[Bindable]
			private var currentOperator:OperatorClass;
			private var currentIndex:int;
			private var vResult:ValidationResultEvent;
			private var file:FileReferenceList = new FileReferenceList();
			private var f:FileReference;
			//			private var loadFromFile:LoadFromFile = new LoadFromFile();
			private function populateForm(event:Event):void
			{
				currentIndex = event.target.selectedIndex;
				currentOperator = event.target.selectedItem;
				operatorName.text = currentOperator.name;
				operatorDescri.text = currentOperator.descri;
				filename.text = currentOperator.filename;
				
				params = currentOperator.params.items;
				outputs = currentOperator.outputs.items;
			}
			private function saveAllHandler(event:MouseEvent):void
			{
				var savePatterns:SaveToFile = new SaveToFile();
				savePatterns.saveOperator(cos);
			}
			private function doPatternDelete(event:MouseEvent):void
			{
				cos.removeItemAt(currentIndex);
				resetForm();
			}
			private function resetForm():void
			{
				operatorName.text = null;
				operatorDescri.text = null;
				filename.text = null;
				params = null;
				outputs = null;
			}
/*			private function newOperator(event:MouseEvent):void
			{
				ToolPanel.tt = 1;
				file.browse();
				file.addEventListener(Event.SELECT, onFileSelect); 
				file.addEventListener(ProgressEvent.PROGRESS, progressHandle); 
				file.addEventListener(Event.COMPLETE, completeHandle); 
				
			}*/
			private function onFileSelect(event:Event):void
			{
				for(var i:int=0;i<file.fileList.length;i++){ 
					f = FileReference(file.fileList[i]);  
					//returnedName.text=f.name;
					f.load();
					f.addEventListener(ProgressEvent.PROGRESS, progressHandle); 
					f.addEventListener(Event.COMPLETE, completeHandle); 
					
				}
			}
			private function completeHandle(event : Event) : void {
				//				cur = true;
				var data:XML = XML(f.data.toString());
				Alert.show("成功载入算子:"+f.name);
				
				var n:OperatorClass = new OperatorClass(f.name,f.data.toString(),"");
				cos.addItem(n);
				//				loadFromFile.data=data;
				//				loadFromFile.filename=f.name;
				//				loadFromFile.patMods = pms;
				//				this.currentState="Construct";
				//				loadFromFile.getNet();
			} 
			
			private function progressHandle(event : ProgressEvent) : void { 
				/*progressLabel.text = "complete " + event.bytesLoaded + " bytes"; 
				var fileUploadPercent : uint = event.bytesLoaded / event.bytesTotal * 100; 
				uploadProgressBar.setProgress(fileUploadPercent, 100); 
				uploadProgressBar.label = "Complete " + fileUploadPercent + "%"; */
			} 
			private function changeCodeFile(event:MouseEvent):void{
				//				var n:OperatorClass = new OperatorClass("Name","Description","");
				//				cos.addItem(n);
			}
			public function removePara(item:AttributeModel):void
			{
				currentOperator.removePara(item);
			}
			public function removeOutput(item:AttributeModel):void
			{
				currentOperator.removeOutput(item);
			}
			private function addParaHandler(event:MouseEvent):void
			{
				vResult = paraNameV.validate();
				if(vResult.type != ValidationResultEvent.VALID)
					return;
				var para:AttributeModel = new AttributeModel(paraName.text, String(paraType.selectedItem), paraDescri.text);
				currentOperator.addPara(para);
			}
			private function addOutputHandler(event:MouseEvent):void
			{
				vResult = outputNameV.validate();
				if(vResult.type != ValidationResultEvent.VALID)
					return;
				var output:AttributeModel = new AttributeModel(outputName.text, String(outputType.selectedItem), outputDescri.text);
				currentOperator.addOutput(output);
			}
		]]>
	</mx:Script>
	
	<mx:Spacer width="50"/>
	<mx:VBox width="200" height="100%" id="List">
		<mx:Label text="自定义算子列表"/>
		<mx:List id="operatorColl" width="200" height="100%" borderStyle="outset"
				 change="populateForm(event)" dataProvider="{cos}" labelField="@name"/>
		<mx:Button label="保存所有修改" click="saveAllHandler(event)"/>
	</mx:VBox>
	
	
	<mx:StringValidator id="paraNameV" source="{paraName}" property="text"/>
	<mx:StringValidator id="outputNameV" source="{outputName}" property="text"/>
	
	<mx:Canvas  width="100%" height="100%">
		<mx:VBox horizontalCenter="0">
			<mx:Form id="info" label="算子信息">
				<mx:FormItem label="算子操作">
					<mx:HBox>
						<mx:Button label="删除算子" click="doPatternDelete(event)"/>
					</mx:HBox>
					
				</mx:FormItem>
				<mx:FormItem label="算子名称">
					<mx:TextArea id="operatorName" height="30"/>
				</mx:FormItem>
				<mx:FormItem label="算子描述">
					<mx:TextArea id="operatorDescri" width="400" height="100"/>
				</mx:FormItem>
				<mx:FormItem label="输入参数信息">
					<mx:DataGrid dataProvider="{params}" editable="true" id="paraGrid">
						<mx:columns>
							<mx:DataGridColumn dataField="name" headerText="属性名称"/>
							<mx:DataGridColumn dataField="type" headerText="属性类型"/>
							<mx:DataGridColumn dataField="descri" headerText="属性描述"/>
							<mx:DataGridColumn editable="false">
								<mx:itemRenderer>
									<mx:Component>
										<mx:VBox>
											<mx:Script>
												<![CDATA[
													import Pattern.AttributeModel;
												]]>
											</mx:Script>
											<mx:Button label="Remove" click="outerDocument.removePara(data as AttributeModel);"/>
										</mx:VBox>
									</mx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
						</mx:columns>
						
					</mx:DataGrid>
				</mx:FormItem>
				<mx:FormItem label="添加输入参数">
					<mx:HBox>
						<mx:Label text="参数名称"/>
						<mx:TextInput id="paraName"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="参数类型"/>
						<mx:ComboBox id="paraType">
							<mx:dataProvider>
								<mx:String>String</mx:String>
								<mx:String>Number</mx:String>
								<mx:String>Date</mx:String>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="参数描述"/>
						<mx:TextInput id="paraDescri"/>
					</mx:HBox>
					<mx:Button id="addAttri" label="添加属性" click="addParaHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="输出变量信息">
					<mx:DataGrid dataProvider="{outputs}" editable="true" id="outputGrid">
						<mx:columns>
							
							<mx:DataGridColumn dataField="name" headerText="属性名称"/>
							<mx:DataGridColumn dataField="type" headerText="属性类型"/>
							<mx:DataGridColumn dataField="descri" headerText="属性描述"/>
							<mx:DataGridColumn editable="false">
								<mx:itemRenderer>
									<mx:Component>
										<mx:VBox>
											<mx:Script>
												<![CDATA[
													import Pattern.AttributeModel;
												]]>
											</mx:Script>
											<mx:Button label="Remove" click="outerDocument.removeOutput(data as AttributeModel);"/>
										</mx:VBox>
									</mx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
						</mx:columns>
						
					</mx:DataGrid>
				</mx:FormItem>
				<mx:FormItem label="添加输出变量">
					<mx:HBox>
						<mx:Label text="变量名称"/>
						<mx:TextInput id="outputName"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="变量类型"/>
						<mx:ComboBox id="outputType">
							<mx:dataProvider>
								<mx:String>String</mx:String>
								<mx:String>Number</mx:String>
								<mx:String>Date</mx:String>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="变量描述"/>
						<mx:TextInput id="outputDescri"/>
					</mx:HBox>
					<mx:Button id="addOutput" label="添加属性" click="addOutputHandler(event)"/>
				</mx:FormItem>
				<mx:FormItem label="可执行文件">
					<mx:Label id="filename"/>
					<mx:Button label="修改可执行代码" click="changeCodeFile(event)"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
		
	</mx:Canvas>
</mx:HBox>
