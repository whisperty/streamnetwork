package fileoperation
{
	import Pattern.AttributeModel;
	import Pattern.OperatorClass;
	import Pattern.PatternModel;
	
	import flash.net.FileReference;
	import flash.net.URLRequest;
	
	import mx.collections.ArrayCollection;
	import mx.controls.Alert;
	
	import org.act.od.impl.business.BpelCreator;
	import org.act.od.impl.figure.ProcessFigure;
	import org.act.od.impl.model.OrDesignerModelLocator;

	public class SaveToFile
	{
		public var netResult:String;
		public var network:String;
		public var f:FileReference;
		private var netFileName:String = "network1.xml";
		public var resultFileName:String = "result1";
		public const patternFileName:String = "Patterns.xml";
		public const operatorFileName:String = "Operators.xml";
		
		public function SaveToFile()
		{
			f = new FileReference();
		}
		public function saveNet():void
		{
			//Alert.show(bpelCreator.getbpel());
			//win=SaveNet(PopUpManager.createPopUp(this,SaveNet,true));
			//PopUpManager.centerPopUp(win);
			//saveToServer();
			saveToServer();
			//var downLoadURL:URLRequest = new URLRequest();
			//var saveXmlUrl:String = netFileName;
			//var f:FileReference = new FileReference();
			//downLoadURL.url = saveXmlUrl;
			//f.download(downLoadURL);
			
		}
		public function saveData(resultData:String):void
		{
			f.save(resultData, resultFileName);
			//var downLoadURL:URLRequest = new URLRequest();
			//downLoadURL.url = resultFileName;
			//f.download(downLoadURL);
		}
		private function saveToServer():void
		{
			var bpelCreator :BpelCreator = new BpelCreator();
			var newBPELText :String;
			var orDesModelLoc :OrDesignerModelLocator = OrDesignerModelLocator.getInstance();
			newBPELText = bpelCreator.outputInfo(ProcessFigure(orDesModelLoc.getFigureEditorNavigatorModel().activeFigureEditorModel.rootFigure) );
			//f.save(bpelCreator.getbpel(), netFileName);
			f.save(newBPELText, netFileName);
		}
		public function savePattern(data:ArrayCollection):void
		{
			var i:int = 0;
			var j:int = 0;
			var patternxml:XML = new XML("<patterns></patterns>");
			for(i=0; i<data.length; i++)
			{
				var pm:PatternModel = PatternModel(data[i]);
				var pa:XML = new XML("<pattern></pattern>");
				pa.@name = pm.patternName;
				pa.@attriNum = pm.attriNum;
				pa.@description = pm.descri;
				var attris:ArrayCollection = pm.attributes;
				for(j=0; j<attris.length; j++)
				{
					var am:AttributeModel = attris[j];
					var at:XML = new XML("<attribute></attribute>");
					at.@name = am.name;
					at.@type = am.name;
					at.@description = am.descri;
					pa.appendChild(at);
				}
				patternxml.appendChild(pa);
			}
			f.save(patternxml, patternFileName);
		}
		public function saveOperator(data:ArrayCollection):void
		{
			var i:int = 0;
			var operatorxml:XML = new XML("<operators></operators>");
			for(i=0; i<data.length; i++)
			{
				var co:OperatorClass = OperatorClass(data[i]);
				var cotemp:XML = new XML("<operator></operator>");
				cotemp.@name = co.name;
				cotemp.@descri = co.descri;
				cotemp.@filename = co.filename;
				operatorxml.appendChild(cotemp);
			}
			f.save(operatorxml, operatorFileName);
		}
	}
}